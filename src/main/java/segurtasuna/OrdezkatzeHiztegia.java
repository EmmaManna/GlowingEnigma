/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package segurtasuna;

public class OrdezkatzeHiztegia {

    private char[] patroiaAusazSortu(){
        //Ausaz letrak esleituko ditu ordezkatze patroia sortzeko
        //Post: Ausaz ordezkatze patroia sortu du Array bat itzuliz

        char patroiaArray[] = new char[26];
        for (int i = 65; i < 91; i++){
            boolean ondo = false;

            while (!ondo){
                int zenb = (int)(Math.floor(Math.random()*(26)));
                char letra = (char)(i); //ASCII kodean letraren balioa 65=A ...

                //Konprobatu posizio hori beteta ez dagoela
                if(!this.posizioaKonprobatu(patroiaArray,zenb)){ //Ez dago
                    patroiaArray[zenb]=letra;
                    ondo=true;
                } //Bestela beste bat sortu
            }
        }

        return patroiaArray;
    }


    private boolean posizioaKonprobatu(char[] patroia, int pos){
        //Karaktere array eta posizio bat emanda posizio hori hustik dagoen konprobatzen du
        //Post: False hutsik badago eta True letra dagoenean

        boolean dago = false;
        if(patroia[pos]!='\u0000') { //Balio nulua ez bada
            dago = true;
        }
        return dago;
    }

    private char[] patroiaGakoarekinSortu(String gakoa){
        //Gako bat emanda patroia sortuko du
        //Post: Gakoa erabiliz, hutsuneak eta errepikatutako letrak kenduz, patroiaren Array-a itzultzen du

        char patroia[] = new char[26];
        String gakoaPrest = this.hutsuneakKendu(gakoa);
        gakoaPrest = this.letraLarrizJarri(gakoaPrest);
        gakoaPrest = this.errepikatuakKendu(gakoaPrest);

        if(gakoaPrest.length() < 26){
            gakoaPrest = gakoaPrest + "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            gakoaPrest = this.errepikatuakKendu(gakoaPrest);
        }

        for(int i = 0; i < 26; i ++){
            patroia[i]=gakoaPrest.charAt(i);
        }

        return patroia;
    }


    private String errepikatuakKendu(String gakoa){
        //String bat emanda, errepikatutako letrak kentzen ditu, lehenengo agerpena soilik utziz
        //Post: Errepikatutako karaktereak ezabatu dira

        String errepikatuGabe = "";
        while (gakoa.length() > 0){
            char letra = gakoa.charAt(0);
            gakoa = gakoa.replace(String.valueOf(letra),"");
            errepikatuGabe = errepikatuGabe+letra;
        }
        //System.out.println(errepikatuGabe);
        return errepikatuGabe;
    }


    public String zifratu(String mezua, String kodea){
        //Mezu bat emanda, ordezkatze algoritmoa erabiliz kriptograma sortuko du
        //Aurre: Mezuak ezin izago ditu karaktere bereziak izan.
        //      Alfabetoa: abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
        //Post: Mezua enkriptatuta itzultzen du

        System.out.println("Emandako mezua:\n" + mezua + "\n");
        System.out.println("Mezua zifratzen...");
        char patroia[];
        if(kodea.equals(" ")){
            patroia = this.patroiaAusazSortu();
        }
        else{
            patroia = this.patroiaGakoarekinSortu(kodea);
        }

        System.out.println("Patroia:\nABCDEFGHIJKLMNOPQRSTUVWXYZ");
        for(int j = 0; j < 26; j++){ //Patroia inprimatu
            System.out.print(patroia[j]);
        }
        System.out.println(" \n");

        String mezuaPrest = "";
        mezuaPrest = this.hutsuneakKendu(mezua);
        mezuaPrest = this.letraLarrizJarri(mezuaPrest);

        String kriptograma = "";
        for(int i = 0 ; i < mezuaPrest.length(); i++){
            int ascii = (int)mezuaPrest.charAt(i);
            int pos = ascii - 65; //Patroian dagokion posizioa kalkulatu
            kriptograma = kriptograma+patroia[pos];
        }

        System.out.println("Kriptograma:\n"+kriptograma+"\n");
        return kriptograma;
    }


    private String hutsuneakKendu(String mezua){
        //Mezu bat emanda hutsuneak kentzen dizkio
        //Post: Hutsune gabeko String bat itzultzen du

        return mezua.replace(" ","");
    }


    private String letraLarrizJarri(String mezua){
        //Mezu bat emanda letra larriz jartzen du
        //Post: Bakarrik letra larriak dituen String bat itzultzen du

       return mezua.toUpperCase();

    }

    public String deszifratu(String kriptograma, String kodea){
        //Kriptograma eta kodea emanda, mezu argia lortzen du
        //Aurre: Kriptogramak eta kodeak ezin dute karaktere berezirik izan
        //Post: Kriptogramari dagokion mezua lortu da

        String mezua = "";

        //Lehenengo patroia lortu behar da
        if(kodea.equals(" ")){
            System.out.println("Barkatu baina gako gabe ezin da mezua lortu :((");
        }
        else{
            System.out.println("Mezua deszifratzen...");
            char patroia[] = this.patroiaGakoarekinSortu(kodea);

            //Behin patroia izanda mezua lortu behar da
            kriptograma=this.hutsuneakKendu(kriptograma);
            kriptograma=this.letraLarrizJarri(kriptograma);

            for(int i = 0 ; i < kriptograma.length(); i++){
                int pos = this.posizioaLortu(kriptograma.charAt(i),patroia);
                char letra = (char)(65+pos);
                mezua = mezua+letra;
            }
            System.out.println("Mezu argia:\n"+mezua+"\n");
        }

        return mezua;
    }


    private int posizioaLortu(char letra, char[] patroia){
        //Letra bat emanda gakoan duen posizioa kalkulatzen du
        //Aurre: Letra larria izan behar da eta beti egongo da patroian
        //Post: Letrari patroian dagokion posizioa itzuliko du

        int pos = 0;
        boolean aurkitua = false;

        while(!aurkitua){
            if(patroia[pos]==letra){
                aurkitua = true;
            }
            else{
                pos++;
            }
        }

        return pos;
    }

    public static void main(String[] args) {

        //System.out.println("Zein da zifratu nahi duzun mezua?\nEzin dira karaktere berezirik egon :)\n");
        //String kodea = new OrdezkatzeHiztegia().zifratu(args[0], args[1]);
        //new OrdezkatzeHiztegia().deszifratu(kodea,args[1]);

        String kriptograma = new CesarZifraketa().zifratu("FUntzIOnaten DU",3 );
        new CesarZifraketa().deszifratu(kriptograma,3);
    }
}
